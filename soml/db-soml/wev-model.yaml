id:          /soml/{{.Values.deployment.platform.sparql_endpoint_repo}}
label:       "WeVerify Semantic Objects Model"
created:     2019-10-17
updated:     2020-10-12
creator:     http://ontotext.com
versionInfo: 1.0
prefixes:
  # schema: http://schema.org/ # see vocab_iri below
  skos:   http://www.w3.org/2004/02/skos/core#
  wev:    http://weverify.eu/ontology/
  enr:    http://ontotext.com/enrichments/ontology/
  rank:   http://www.ontotext.com/owlim/RDFRank#
specialPrefixes:
  base_iri:     http://weverify.eu/resource/
  vocab_iri:    http://schema.org/
  vocab_prefix: schema
  ontology_iri: http://weverify.eu/resource/ontology
  shape_iri:    http://weverify.eu/resource/shape/
objects:
  # Agents, places
  Agent:
    kind: abstract
    name: schema:name
    props:
      schema:name: {min: 1}
      sameAs: {range: iri, max: inf}
      appearance:  {range: Appearance , inverseAlias: author, max: inf}
      claim:       {range: Claim      , inverseAlias: author, max: inf}
      claimReview: {range: ClaimReview, inverseAlias: author, max: inf}
  Person:
    inherits: Agent
    prefix: Person/
  Organization:
    inherits: Agent
    prefix: Organization/
  Place:
    props:
      address:
      sameAs: {range: iri, descr: "Reference to Geonames"}
  # Main business objects
  Claim:
    descr: "A specific, factually-oriented claim that may be true or false"
    name: text # Note: this could be quite long, but we still prefer to have it
    prefix: Claim/
    props:
      text: {min: 1}
      dateCreated: {range: dateTime} # TODO: can this have smaller precision?
      author: {range: Agent}
      publisher: {range: Organization}
      appearance: {range: Appearance, max: inf}
      review: {label: "Reviews for a Claim", range: ClaimReview, rangeCheck: true, max: inf, inverseAlias: "itemReviewed" }
      popularity: {label: "Popularity of the claim", rdfProp: rank:hasRDFRank5, range: decimal}
      language: {label: "Language of the primary text associated with the object.", rdfProp: inLanguage, max: inf, range: string}
      automaticallyIngested: {label: "Records whether this item was automatically ingested or submittted by a person.", rdfProp: wev:automaticallyIngested, range: boolean }
      lastUpdatedBy: {label: "Records which data service last added information to this item. For internal system use.", rdfProp: wev:lastUpdatedBy, range: string }
  Appearance:
    descr: "Occurrence of a Claim in some CreativeWork (online article or media)"
    type: [wev:Appearance]
    prefix: Appearance/
    props:
      url: {range: string, min: 1}
      archiveUrl: {range: iri}
      schema:type: {rdfProp: schema:additionalType}
      caption: {rdfProp: schema:abstract}
      contentLocation: {label: "DEPRECATED: Currently only exists in example data and should not be used.", range: Place, max: inf, descr: "Place(s) mentioned in the content"}
      dateCreated: {range: dateTime} # TODO: can this have smaller precision?
      imageLink: {max: inf}
      videoLink: {max: inf}
      otherLink: {max: inf}
      author: {range: Agent}
      containsClaim: {range: Claim, inverseAlias: appearance, min: 1}
      language: {label: "Language of the primary text associated with the object.", rdfProp: inLanguage, max: inf, range: string}
      automaticallyIngested: {label: "Records whether this item was automatically ingested or submittted by a person.", rdfProp: wev:automaticallyIngested, range: boolean }
      lastUpdatedBy: {label: "Records which data service last added information to this item. For internal system use.", rdfProp: wev:lastUpdatedBy, range: string }
      sharedContent: {label: "DEPRECATED: No data here, use imageLink, videoLink and otherLink properties instead.", range: CreativeWork, max: inf, descr: "Image, video, or audio clip shared as part of social media posting"}
  CreativeWork: # TODO review props, currently they have only `url`
    props:
      url: {range: iri, min: 1}
      text:
      dateCreated: {range: dateTime} # TODO: can this have smaller precision?
  ClaimReview:
    descr: "Fact-checking review of a claim made or reported"
    # name: reviewBody # Too long for this purpose
    prefix: ClaimReview/
    props:
      itemReviewed: {range: Claim, min: 1}
      author: {range: Agent, min: 1}
      publisher: {range: Organization}
      dateCreated: {range: dateTime}
      reviewBody: {min: 1}
      reviewHtml:
      hasPart: {range: SupportingEvidence, max: inf}
      externalUrl: {rdfProp: schema:sameAs}
      additionalType: {range: ReviewType}
      misleadershipStrategy: {rdfProp: wev:misleadershipStrategy, range: MisleadershipStrategy}
      reviewRating: {range: Rating}
      language: {label: "Language of the primary text associated with the object.", rdfProp: inLanguage, max: inf, range: string}
      automaticallyIngested: {label: "Records whether this item was automatically ingested or submittted by a person.", rdfProp: wev:automaticallyIngested, range: boolean }
      lastUpdatedBy: {label: "Records which data service last added information to this item. For internal system use.", rdfProp: wev:lastUpdatedBy, range: string }

  SupportingEvidence:
    type: [wev:SupportingEvidence]
    prefix: SupportingEvidence/
    props:
      about: {range: iri}
      text:
      additionalType: {range: EvidenceType}
      dateCreated: {range: dateTime} # TODO: can this have smaller precision?
      lastUpdatedBy: {label: "Records which data service last added information to this item. For internal system use.", rdfProp: wev:lastUpdatedBy, range: string }

  Rating:
    kind: abstract
    descr: "Evaluation of a Claim on a variety of scales (numeric or categorial)"
    props:
      bestRating: {descr: "Highest value allowed in this rating system, default 5"}
      worstRating: {descr: "Lowest value allowed in this rating system, default 1"}
      ratingValue: {descr: "Actual rating value", min: 1}
  SourceRating:
    type: [wev:SourceRating]
    prefix: Review/
    inherits: Rating
    descr: "Evaluation of a Claim on a source-specific scale (numeric or categorial)"
  NormalizedRating:
    type: [wev:NormalizedRating]
    prefix: "Review/Normalized/"
    inherits: Rating
    descr: "Evaluation of a Claim on a normalized scale: FALSE, OTHER, TRUE"

  # Enrichments
  Annotation:
    type: [enr:Annotation]
    prefix: Annotation/
    descr: "A specific instance of a concept being mention in the text of a document"
    props:
      description: {descr: "The text that mentions a concept", min: 1}
      mentionedIn: {descr: "The object that contains the concept mention.", min: 1}
      concept: {descr: "The concept that is mentioned", rdfProp: enr:hasConcept, range: DefinedTerm, min: 1}
      producedBy: {descr: "The service or system that produced this annotation.", rdfProp: enr:producedBy, range: SoftwareApplication, min: 1}
      confidence: {descr: "Confidence in the accuracy of the concept.", rdfProp: enr:confidence, range: decimal}
      relevance: {descr: "Relevance of the concept to the document.", rdfProp: enr:relevance, range: decimal}
      startOffset: {descr: "The beginning offset of the mention in the document text.", range: integer}
      endOffset: {descr: "The end offset of the mention in the document text.", range: integer}

  DefinedTerm:
    type: [DefinedTerm]
    prefix: Concept/
    descr: "A concept recognized by one of the automatic enrichment systems."
    props:
      subtype: {descr: "The type of term.", min: 1}
      code: {descr: "The unique identifier of the concept in the system", rdfProp: termCode, min: 1}
      label: {descr: "The name of the concept", rdfProp: schema:name, min: 1}
      termSet: {descr: "The set of concepts produced by a specific enrichment system", range: DefinedTermSet, min: 1, max: inf}
      url: {descr: "The url of the concept in an external system e.g. DBpedia", range: iri}
      mentionedIn: {descr: "An object that mentions the concept.", max: inf}

  DefinedTermSet:
    type: [DefinedTermSet]
    prefix: TermSet/
    descr: "A list of concepts produced by a specific enrichment system."
    props:
      setName: {descr: "The name of the system that produces this list of concepts.", rdfProp: schema:name, min: 1}

  SoftwareApplication:
    type: [SoftwareApplication]
    prefix: Software/
    descr: "A system or algorithm used for concept enrichment."
    props:
      softwareName: {descr: "The name of a system or algorithm.", rdfProp: schema:name, min: 1}
      softwareVersion: {descr: "Detailed description of the version of the software."}

  # Thesauri
  ConceptScheme:
    descr: "A thesaurus (nomenclature)"
    name: prefLabel
    props:
      prefLabel: {rdfProp: skos:prefLabel, min: 1}
  Concept:
    descr: "A thesaurus (nomenclature) value"
    kind: abstract
    type: [skos:Concept]
    name: prefLabel
    props:
      inScheme: {rdfProp: skos:inScheme, range: ConceptScheme, min: 1}
      prefLabel: {rdfProp: skos:prefLabel, min: 1}
      description: {rdfProp: skos:description}
  MisleadershipStrategy:
    descr: "What strategy is used in a misleading claim"
    inherits: Concept
    #typeProp: "skos:inScheme"
    type: [strategy]
    prefix: strategy/
  ReviewType:
    descr: "Type of ClaimReview"
    inherits: Concept
    #typeProp: "skos:inScheme"
    type: [reviewType]
    prefix: reviewType/
  EvidenceType:
    descr: "Type of SupportingEvidence"
    inherits: Concept
    #typeProp: "skos:inScheme"
    type: [evidence]
    prefix: evidence/
